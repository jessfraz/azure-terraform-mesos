#cloud-config

---
coreos:
  etcd:
    discovery: "https://discovery.etcd.io/1d77508dc31cf372d517ed2e96e8f5cf"
    advertise-client-urls: "http://$private_ipv4:2379"
    initial-advertise-peer-urls:  "http://$private_ipv4:2380"
    listen_client_urls:          "http://0.0.0.0:2379"
    listen_peer_urls:            "http://$private_ipv4:2380"
  units:
  - name: nomad.service
    command: start
    enable: true
    content: |
      [Unit]
      Description=Nomad Agent
      After=docker.service
      Requires=docker.service

      [Service]
      Restart=on-failure
      RestartSec=20
      TimeoutStartSec=0
      ExecStartPre=-/usr/bin/docker rm -f nomad
      ExecStartPre=-/usr/bin/docker pull r.j3ss.co/nomad:latest
      ExecStart=/usr/bin/sh -c "/usr/bin/docker run \
        -e SERVICE_IGNORE=true \
        -p 8080:4646 \
        --hostname bastion \
        -v /etc/nomad/certs:/etc/nomad/certs:ro \
        --volume /etc/nomad.d:/etc/nomad.d \
        --name=nomad \
        r.j3ss.co/nomad:latest \
          agent -config=/etc/nomad.d/client.hcl"
      ExecStop=/usr/bin/docker stop nomad

      [Install]
      WantedBy=multi-user.target
write_files:
- path: "/home/vmuser/.bashrc"
  permissions: "0777"
  owner: "vmuser"
  content: |
    # /etc/skel/.bashrc
    #
    # This file is sourced by all *interactive* bash shells on startup,
    # including some apparently interactive shells such as scp and rcp
    # that can't tolerate any output.  So make sure this doesn't display
    # anything or bad things will happen !


    # Test for an interactive shell.  There is no need to set anything
    # past this point for scp and rcp, and it's important to refrain from
    # outputting anything in those cases.
    if [[ $- != *i* ]] ; then
            # Shell is non-interactive.  Be done now!
            return
    fi

    consul(){
      sudo docker run --rm -it --net host \
        -e CONSUL_HTTP_ADDR=https://10.0.0.5:8501 \
        -e CONSUL_CACERT=/etc/consul/certs/ca.pem \
        -e CONSUL_CLIENT_CERT=/etc/consul/certs/cli.pem \
        -e CONSUL_CLIENT_KEY=/etc/consul/certs/cli-key.pem \
        -v /etc/consul/certs:/etc/consul/certs:ro \
        r.j3ss.co/consul $@
    }

    nomad(){
      sudo docker run --rm -it --net host \
        -e NOMAD_ADDR=https://10.0.0.5:4646 \
        -e NOMAD_CACERT=/etc/nomad/certs/ca.pem \
        -e NOMAD_CLIENT_CERT=/etc/nomad/certs/cli.pem \
        -e NOMAD_CLIENT_KEY=/etc/nomad/certs/cli-key.pem \
        -v /etc/nomad/certs:/etc/nomad/certs:ro \
        -v $(pwd):/usr/src \
        --workdir /usr/src \
        r.j3ss.co/nomad $@
    }
- path: "/etc/nomad.d/client.hcl"
  permissions: "0644"
  owner: "root"
  content: |
    data_dir = "/etc/nomad.d"

    client {
      enabled          = true
      servers = ["10.0.0.5:4647","10.0.0.6:4647","10.0.0.7:4647","10.0.0.8:4647","10.0.0.9:4647","10.1.0.5:4647","10.1.0.6:4647","10.1.0.7:4647","10.1.0.8:4647","10.1.0.9:4647","10.2.0.5:4647","10.2.0.6:4647","10.2.0.7:4647","10.2.0.8:4647","10.2.0.9:4647"]

      reserved {
        cpu            = 1
        memory         = 1
        disk           = 1
      }
    }

    tls {
      http = false
      rpc  = true

      ca_file   = "/etc/nomad/certs/ca.pem"
      cert_file = "/etc/nomad/certs/client.pem"
      key_file  = "/etc/nomad/certs/client-key.pem"

      #verify_server_hostname = true
      #verify_https_client    = true
    }
